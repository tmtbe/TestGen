junit.generator.ui.title.vm=Velocity Template
junit.generator.ui.title.properties=[junit.generator.ui.title.properties / com/thoughtworks/work/vm-template]
junit.generator.vm.names=API Test,Repository Test,Service Test
junit.generator.vm.1=\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package $entry.packageName; \n\
 \n\
import cn.com.starbucks.contentsvc.infrastructure.BaseControllerTest;\n\
import org.junit.jupiter.api.Test;\n\
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;\n\
import org.springframework.boot.test.mock.mockito.MockBean;\n\
import org.springframework.http.MediaType;\n\
import org.springframework.web.reactive.function.BodyInserters; \n\
import org.junit.jupiter.api.Assertions.*;\n\
import org.springframework.http.HttpMethod;\n\
#foreach($import in $entry.importList) \n\
import $import;\n\
#end\n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$today</pre> \n\
 * @version 1.0 \n\
 */ \n\
@WebFluxTest(controllers = ${entry.className}.class, properties = "embedded.containers.enabled=false")\n\
public class $testClass extends BaseControllerTest { \n\
#foreach($param in $entry.constructorParamList)\n\
    @MockBean\n\
    $param.shortClassNameT ${tool.sap($param.shortClassName)};\n\
#end \n\
 \n\
#foreach($method in $entry.methodList) \n\
#if($method.restInfoMethod)\n\
        /** \n\
         * \n\
         * Method: $method.signature \n\
         * \n\
         */ \n\
        @Test \n\
        public void test${tool.cap($method.name)}() throws Exception { \n\
            #if(${method.restInfoBody})\n\
            ${method.restInfoBody.shortClassNameT} ${method.restInfoBody.paramName} = null;\n\
            #end\n\
            webClient.method(HttpMethod.${method.restInfoMethod})\n\
                .uri(${method.restInfoPath})\n\
            #foreach($head in ${method.restInfoHeads})\n\
                .header($head,"\{\$head\}\")\n\
            #end\n\
                #if(${method.restInfoMethod}=="post")\n\
                .contentType(MediaType.APPLICATION_JSON)\n\
                #end\n\
                #if(${method.restInfoBody})\n\
                .body(BodyInserters.fromValue(${method.restInfoBody.paramName}))\n\
                #end\n\
                .exchange()\n\
                .expectStatus().isOk();\n\
        } \n\
#end\n\
#end \n\
} \n\
#end
junit.generator.vm.2=\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package $entry.packageName; \n\
 \n\
import cn.com.starbucks.contentsvc.infrastructure.BaseRepositoryTest;\n\
import org.junit.jupiter.api.Assertions;\n\
import org.junit.jupiter.api.Test;\n\
import org.junit.jupiter.api.Assertions.*;\n\
import org.springframework.beans.factory.annotation.Autowired;\n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$date</pre> \n\
 * @version 1.0 \n\
 */ \n\
public class $testClass extends BaseRepositoryTest { \n\
 \n\
    @Autowired \n\
private ${entry.className} ${tool.sap($entry.className)}; \n\
 \n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test${tool.cap($method.name)}() throws Exception { \n\
        //TODO: Test goes here... \n\
    } \n\
 \n\
#end \n\
} \n\
#end
junit.generator.vm.3=\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package $entry.packageName; \n\
 \n\
import cn.com.starbucks.contentsvc.infrastructure.BaseRepositoryTest;\n\
import org.junit.jupiter.api.Assertions;\n\
import org.junit.jupiter.api.Test;\n\
import org.junit.jupiter.api.Assertions.*;\n\
import org.mockito.Mockito;\n\
import org.springframework.beans.factory.annotation.Autowired;\n\
#foreach($param in $entry.deepConstructorParamList) \n\
#foreach($import in ${param.importNames})\n\
import $import;\n\
#end\n\
#end \n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$date</pre> \n\
 * @version 1.0 \n\
 */ \n\
public class $testClass { \n\
 \n\
#foreach($param in $entry.deepConstructorParamList) \n\
    private final ${param.shortClassNameT} ${tool.sap($param.shortClassName)}; \n\
#end \n\
public $testClass() {\n\
#foreach($param in $entry.deepConstructorParamList) \n\
  #if(${param.ifInterface}) \n\
    // Mockito.when(${tool.sap($param.shortClassName)}.xxx()).then(...);\n\
    ${tool.sap($param.shortClassName)} = Mockito.mock(${param.shortClassName}.class); \n\
  #else \n\
    ${tool.sap($param.shortClassName)} = new ${param.shortClassName}(${tool.buildParam($param.constructorNeedParamList)}); \n\
  #end \n\
#end \n\
}\n\
 \n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test${tool.cap($method.name)}() throws Exception { \n\
        //TODO: Test goes here... \n\
    } \n\
 \n\
#end \n\
} \n\
#end
junit.generator.ui.title.combinegetterandsetter=[junit.generator.ui.title.combinegetterandsetter / com/thoughtworks/work/vm-template]
junit.generator.ui.title.generateforoverloaded=[junit.generator.ui.title.generateforoverloaded / com/thoughtworks/work/vm-template]
junit.generator.file.exists=File already exists. Do you want to see the difference between the old and the new test cases?\n\
  By answering 'No' you will overwrite an existing file.
junit.generator.error.title=Error
junit.generator.error.noselectedtemplate=There does not appear to be a valid template. Is one configured? Check the settings.
junit.generator.ui.outputPath=Output Pattern definition file. \\ Available variables\:\\      $SOURCEPATH$ - location where source code for current project resides\\      $PACKAGE$ - package path where TestedClass resides\\      $FILENAME$ - Filename of the testClass. Note\: if you modify filename only\\      the file name will be affected not a class name\\ \\ Anything before $SOURCEPATH$ will be ignored. If you need to go outside of the\\ sourcepath use $SOURCEPATH$/../\\   \\ Developers using maven should probably use $SOURCEPATH$/../../test/mai\n\ \\ For project specific configuration you can add separate line for every project.\\ Earch line must start with project name. i.e\\ junitgen\=$SOURCEPATH$/testing/$PACKAGE$/$FILENAME$\\ If project specific configuration does not exist, the following line will be used.
junit.generator.ui.outputPath.label=[junit.generator.ui.outputPath.label / com/thoughtworks/work/vm-template]
junit.generator.outputPath=${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}
junit.generator.ui.generateStyle.label=[junit.generator.ui.generateStyle.label / com/thoughtworks/work/vm-template]
junit.generator.ui.diff.titles=Generated Test,Merge Result,Existing Test
junit.generator.ui.diff.window.title=Generated JUnit Merge
junit.generator.ui.selectedvm.label=[junit.generator.ui.selectedvm.label / com/thoughtworks/work/vm-template]